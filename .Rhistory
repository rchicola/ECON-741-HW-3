file_path=-"/home/appertjt/Documents/Grad School/econometrics fall/Code/homework3/CH6_HW-1.dta"
library(foreign)
library("readstata13")
data<-read.dta13(file_path)
file_path=-"/home/appertjt/Documents/Grad School/econometrics fall/Code/homework3/CH6_HW-1.dta"
library(foreign)
library("readstata13")
data<-read.dta13(file_path)
file_path<-"/home/appertjt/Documents/Grad School/econometrics fall/Code/homework3/CH6_HW-1.dta"
library(foreign)
library("readstata13")
data<-read.dta13(file_path)
file_path<-"/home/appertjt/Documents/Grad School/econometrics fall/Code/homework3/ECON-741-HW-3/CH6_HW-1.dta"
library(foreign)
library("readstata13")
data<-read.dta13(file_path)
data
df1.d<-data.frame(df1)
df1.d
df1.d<-data.frame(data)
df1.d
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
df1.d<-df1.d[df1.d["incwage"]<999999,]
df1.d<-df1.d[df1.d['incwage']>0,]
df1.d
summary(df1.d)
#Need the following for the polynomials question:
#  Age >15 and < 66
#  Earnings >0
#  Hours>1000
df1.d<-df1.d[df1.d["incwage"]<999999,]  #filtering out
df1.d<-df1.d[df1.d['incwage']>0,]  #wages >0
df1.d<-df1.d[df1.d["age"]>15,]  #older than 15
df1.d<-df1.d[df1.d["age"}<66,]  #younger than 66
df1.d["uhrswork"]<-df1.d["uhrswork"]*50
df1.d<-df1.d[df1.d["uhrswork"]>1000,]
summary(df1.d)
#run the standard regression to check our work.
reg_age = lm(incwage ~ age, data=df1.d)
summary(reg_age)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(4, age), data=df1.d)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(3, age), data=df1.d)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(age, 4), data=df1.d)
summary(reg_age)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(age, 5), data=df1.d)
summary(reg_age)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(age, 6), data=df1.d)
summary(reg_age)
#run a 4th order linear regression
reg_age = lm(incwage ~ poly(age, 4), data=df1.d)
summary(reg_age)
library(ggpredict)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
df1.d
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
summary(df1.d)
#get X squared
transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d["age", "age2"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
#get X squared
df1.d<-transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d["age", "age2"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
#get X squared
df1.d<-transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d["age", "age2"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
summary(df1.d)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d["age", "age2"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
x<-as.matrix(df1.d["age"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
transform(df1.d, age2=age^2)
#assign the independent and dependent variables
print (df1.d$age2)
x<-as.matrix(df1.d["age", "age2"])
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
df1.d<-transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d["age", "age2"])
print (x)
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
x<-as.matrix(df1.d$age, df1.d$age2)
print (x)
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
df1.d<-transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x<-as.matrix(df1.d$age, df1.d$age2)
print (x)
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x), ncol=1,1)
xmat<-cbind(x, cons)
print (xmat)
print (x)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
df1.d<-transform(df1.d, age2=age^2)
y<-as.matrix(df1.d["incwage"])
x1<-as.matrix(df1.d["age", "age2"], ncol=2)
print (x1)
x1<-as.matrix(df1.d["age"]
print (x1)
x1<-as.matrix(df1.d["age"])
print (x1)
print (ncol(epsilon2))
#find epsilon2
epsilon2<-(t(epsilonHat)%*%epsilonHat)
print (ncol(epsilon2))
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
#get a column for age squared
df1.d<-transform(df1.d, age2=age^2)
#assign the independent and dependent variables
y<-as.matrix(df1.d["incwage"])
x1<-as.matrix(subset(df1.d, select=c("age", "age2")))
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x1), ncol=1,1)
xmat<-cbind(x1, cons)
betaHat<-(solve(t(xmat)%*%(xmat)))%*%(t(xmat)%*%y)
#find yhat
yHat=xmat%*%betaHat
#find the residuals
epsilonHat=y-yHat
#find epsilon2
epsilon2<-(t(epsilonHat)%*%epsilonHat)
print (ncol(epsilon2))
print (epsilon2)
#find omegaH
omegaH=epsilon%*%t(epsilon)
#find omegaH
omegaH=epsilonHat%*%t(epsilonHat)
#find omegaH
omegaH=(epsilonHat%*%t(epsilonHat))
#find omegaH
omegaH=diag(epsilonHat%*%t(epsilonHat))
library('Matrix')
#find omegaH
omegaH=Matrix((epsilonHat%*%t(epsilonHat)), sparse=TRUE)
omegaDiag<-epsilonHat^2
SE<-omegaDiag%*%(solve(t(xmat)%*%(xmat)))
SE<-(solve(t(xmat)%*%(xmat)))%*%omegaDiag
print (SE)
print (nrow(omegaHat))
print (nrow(omegaDiag))
print (ncol(omegaDiag))
print (ncol(xmat))
print (nrow(xmat))
z<-solve(t(xmat)%*%(xmat))
SE<-(z)%*%t(xmat)%*%t(xmat)%*%omegaDiag%*%diag(nrow(omegaDiag))%*%xmat%*%z
SE<-(z)%*%t(xmat)%*%omegaDiag%*%diag(nrow(omegaDiag))%*%xmat%*%z
SE<-(z)%*%t(xmat)%*%omegaDiag%*%Matrix(diag(nrow(omegaDiag, sparse=True)))%*%xmat%*%z
SE<-(z)%*%t(xmat)%*%omegaDiag%*%Matrix(diag(nrow(omegaDiag, sparse=TRUE)))%*%xmat%*%z
I=Matrix(diag(nrow(omegaDiag)), sparse=TRUE)
SE<-(z)%*%t(xmat)%*%omegaDiag%*%xmat%*%z
part1<-z%*%t(xmat)
part2<-part1%*%omegaDiag
part3<-part2%*%xmat
varBeta=omegaDiag%*%z
varBeta=z%*%omegaDiag
print (nrow(z))
print (ncol(z))
I<-(matrix(0, nrow(omegaDiag), nrow(omegaDiag), sparse=TRUE), 1)
I<-matrix(0, nrow(omegaDiag), nrow(omegaDiag), sparse=TRUE)
I<-matrix(0, nrow(omegaDiag), nrow(omegaDiag))
I<-matrix(0, nrow=nrow(omegaDiag),ncol= nrow(omegaDiag), sparse=TRUE)
I<-Matrix(0, nrow=nrow(omegaDiag), ncol= nrow(omegaDiag), sparse=TRUE)
#fill the diagonal
diag(I)<- 1
#get omegaW
omegaW<-omegaDiag%*%I
#fill the diagonal
diag(I)<omegaDiag
#fill the diagonal
diag(I)<-omegaDiag
I<-Matrix(0, nrow=nrow(omegaDiag), ncol= nrow(omegaDiag), sparse=TRUE)
#fill the diagonal
diag(I)<-omegaDiag
#get omegaW
omegaW<-I
varBeta=z%*%t(xmat)%*%omegaW%*%xmat%*%(z)
print (varBeta)
print (varBeta)
print(sqrt(diag(varBeta)))
plot_matrix=cbind(yhat, omegaDiag)
plot_matrix=cbind(yHat, omegaDiag)
print (plot_matrix)
library(ggplot2)
qgplot(yHat, omegaDiag)
qplot(yHat, omegaDiag)
qplot(yHat, x)
ggsave("residuals.png")
qplot(omegaDiag, x)
qplot(x, omegaDiag, xlab="Age", ylab="Squared Residuals")
qplot(x, epsilonHat, xlab="Age", ylab="Residuals")
ggsave("residuals.png")
qplot(x, epsilonHat, xlab="Age", ylab="Residuals")
library('Matrix')
library(ggplot2)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
#get a column for age squared
df1.d<-transform(df1.d, age2=age^2)
#assign the independent and dependent variables
y<-as.matrix(df1.d["incwage"])
x1<-as.matrix(subset(df1.d, select=c("age", "age2")))
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x1), ncol=1,1)
xmat<-cbind(x1, cons)
betaHat<-(solve(t(xmat)%*%(xmat)))%*%(t(xmat)%*%y)
#find yhat
yHat=xmat%*%betaHat
#find the residuals
epsilonHat=y-yHat
#find omegaH.
#We can't do this explicitly because of the size of the matrix so we'll cheat.
#Remember, we're assuming off diagonal is zero.  So instead of calculating the whole matrix
#we'll calculate the diagonal and then multiply it by I.
omegaDiag<-epsilonHat^2
#Now build a sparse matrix to get around the size of the matrix memory problem
I<-Matrix(0, nrow=nrow(omegaDiag), ncol= nrow(omegaDiag), sparse=TRUE)
#fill the diagonal
diag(I)<-omegaDiag
#get omegaW
omegaW<-I
z<-solve(t(xmat)%*%(xmat))
varBeta=z%*%t(xmat)%*%omegaW%*%xmat%*%(z)
print (varBeta)
print(sqrt(diag(varBeta)))
varBeta<-nrow(xmat)/(nrow(xmat)-ncol(xmat))*varBeta
print (varBeta)
print(sqrt(diag(varBeta)))
library('Matrix')
library(ggplot2)
file_path<-"/home/appertjt/Documents/Grad School/econometrics/Code/homework3/ECON-741-HW-3/munged_data.csv"
data<-read.csv(file_path)
df1.d<-data.frame(data)
#convert all columns to numeric values
df1.d<-transform(df1.d, incwage=as.numeric(incwage), uhrswork=as.numeric(uhrswork), age=as.numeric(age))
summary(df1.d)
#get a column for age squared
df1.d<-transform(df1.d, age2=age^2)
#assign the independent and dependent variables
y<-as.matrix(df1.d["incwage"])
x1<-as.matrix(subset(df1.d, select=c("age", "age2")))
#run a 2nd order linear regression
#create a column of constants
#set up the constant
cons<-matrix(nrow=nrow(x1), ncol=1,1)
xmat<-cbind(x1, cons)
betaHat<-(solve(t(xmat)%*%(xmat)))%*%(t(xmat)%*%y)
#find yhat
yHat=xmat%*%betaHat
#find the residuals
epsilonHat=y-yHat
#find omegaH.
#We can't do this explicitly because of the size of the matrix so we'll cheat.
#Remember, we're assuming off diagonal is zero.  So instead of calculating the whole matrix
#we'll calculate the diagonal and then multiply it by I.
omegaDiag<-epsilonHat^2
#Now build a sparse matrix to get around the size of the matrix memory problem
I<-Matrix(0, nrow=nrow(omegaDiag), ncol= nrow(omegaDiag), sparse=TRUE)
#fill the diagonal
diag(I)<-omegaDiag
#get omegaW
omegaW<-I
z<-solve(t(xmat)%*%(xmat))
varBeta=z%*%t(xmat)%*%omegaW%*%xmat%*%(z)
varBeta1<-nrow(xmat)/(nrow(xmat)-ncol(xmat))*varBeta
print (varBeta)
print(sqrt(diag(varBeta)))
print(sqrt(diag(varBeta1)))
